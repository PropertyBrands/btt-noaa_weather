<?php
// $Id:$

/**
 * @file
 * add description here
 * @author Dan Bopeley <dan@bluetent.com>
 * @name Blue Tent Marketing
 * @since 11/29/2009
 * @version 1.0
 * 
 * 
 * @see http://www.weather.gov/xml/current_obs/
 */


//module configuration 
define ('NOAAWEATHER_CACHE_TIME', 3600);
define ('NOAAWEATHER_CURRENT_URL', 'http://www.weather.gov/xml/current_obs/');
define ('NOAAWEATHER_FORECAST_URL', 'http://www.weather.gov/forecasts/xml/SOAP_server/ndfdSOAPclientByDay.php');
define ('SOCKET_TIMEOUT_SECONDS', 5);

//user and location configuration
//define ('NOAAWEATHER_OVERRIDE_DIRECTORY_DEFAULT', drupal_get_path('module', 'noaaweather') . '/images');
//define ('NOAAWEATHER_LOCATION_NAME_DEFAULT', t('Basalt, CO'));
define ('NOAAWEATHER_TEMP_UNIT_DEFAULT', 'f');

define ('NOAAWEATHER_CURRENT_STATION_DEFAULT', 'KASE'); // Aspen Sardy Field
define ('NOAAWEATHER_FORECAST_LON_DEFAULT', '-122.30');
define ('NOAAWEATHER_FORECAST_LAT_DEFAULT', '47.53');  
define ('NOAAWEATHER_FORECAST_DAYS_DEFAULT', 5);
define ('NOAAWEATHER_FORECAST_DAYSPAN_DEFAULT', '12');
define ('NOAAWEATHER_FORECAST_TEMP_UNIT_DEFAULT', 'f');


//define ('NOAAWEATHER_RADAR_STATION_DEFAULT','gjx');  //Grand Junction
define ('NOAAWEATHER_RADAR_PICTURE_WIDTH',600);
define ('NOAAWEATHER_RADAR_PICTURE_HEIGHT',550);

//helper function include
require_once(drupal_get_path('module', 'noaaweather') .'/noaa_helpers.inc');


/**
 * Implementation of hook_help
 */
function noaaweather_help($section){
  switch ($section){
    case 'noaaweather':
      $output = t('noaaweather');
      return $output;
  }
}


/**
 * Implementation of hook_perm().
 */
function noaaweather_perm(){
  return array( 'administer noaaweather', 'access noaaweather');
}


/**
 * Implementation of hook_menu().
 * 
 *   $access_content = user_access('access content');
 */

function noaaweather_menu( $may_cache ){
  if ( $may_cache ){
  	
  	$items[] = array( 
			'path' => 'admin/settings/noaaweather',
			'title' => t( 'NOAA Weather' ),
			'callback' => 'noaaweather_overview_settings',
			'access' => user_access( 'administer noaaweather' ),
			'type' => MENU_NORMAL_ITEM
			);
  	
			
    $items[] = array(
      'path' => 'admin/settings/noaaweather/main',
      'title' => 'NOAA Weather',
      'callback' => 'noaaweather_overview_settings',
      'access' => user_access( 'administer noaaweather' ),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1
      ); 
      
    $items[] = array(
      'path' => 'admin/settings/noaaweather/current-conditions',
      'title' => 'NOAA Weather Current Conditions',
      'callback' => 'noaaweather_current_settings',
      'access' => user_access( 'administer noaaweather' ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 2
      ); 
      
    $items[] = array(
      'path' => 'admin/settings/noaaweather/point-forecast',
      'title' => 'NOAA Weather Point Forecast',
      'callback' => 'noaaweather_forecast_settings',
      'access' => user_access( 'administer noaaweather' ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3
      );
      
    $items[] = array(
      'path' => 'admin/settings/noaaweather/radar',
      'title' => 'NOAA Weather Radar',
      'callback' => 'noaaweather_radar_settings',
      'access' => user_access( 'administer noaaweather' ),
      'type' => MENU_LOCAL_TASK,
      'weight' => 4
      ); 
      
      		
		$items[] = array(
			'path' => 'admin/settings/noaaweather/icons',
			'title' => t( 'NOAA Icon Settings' ),
			'callback' => 'noaaweather_icon_settings',
			'access' => user_access( 'administer noaaweather' ),
			'type' => MENU_LOCAL_TASK,
			'weight' => 5
			);
      
      
      
  }
  else{
        $items[] = array(
          'path' => 'update_noaa',
          'callback' => '_noaaweather_update_weather',
          'access' => user_access('access noaaweather'),
          'type' => MENU_CALLBACK,
      );
      
    $items[] = array(
          'path' => 'update_current_xml',
          'callback' => '_noaaweather_get_current',
          'access' => user_access('access noaaweather'),
          'type' => MENU_CALLBACK,
      );
      
      $items[] = array(
          'path' => 'update_forecast_xml',
          'callback' => '_noaaweather_get_forecast',
          'access' => user_access('access noaaweather'),
          'type' => MENU_CALLBACK,
      );
      
      
      $items[] = array(
          'path' => 'update_radar_image',
          'callback' => '_noaaweather_get_radar',
          'access' => user_access('access noaaweather'),
          'type' => MENU_CALLBACK,
      );
      
      
     	$items[] = array(
          'path' => 'enable-default-icons',
          'callback' => '_noaaweather_enable_icons',
          'access' => user_access('access noaaweather'),
          'type' => MENU_CALLBACK,
      );
          
  }
  return $items;
}

/**
 * Admin menu callback function
 */
function noaaweather_overview_settings(){
  return drupal_get_form( 'noaaweather_settings_form' );
}



// ******************** FORMS ********************
/**
 * Main settings form
 */
function noaaweather_settings_form(){
  require_once(drupal_get_path('module', 'noaaweather') .'/noaaweather_stations.inc');
  require_once(drupal_get_path('module', 'noaaweather') .'/noaaradar_stations.inc');

  $radar_dimension_config ='
  jQuery("#edit-noaaweather-radar-width").ready( function()
  { 
    jQuery("#edit-noaaweather-radar-width").change( function()
    {
          var widthvalue = $(this).val();
            var heightvalue = Math.ceil(widthvalue * .916666);
            
            alert(heightvalue);
            jQuery("#edit-noaaweather-radar-height").val(heightvalue);
            jQuery("div#radar_height").text(heightvalue);
    } 
    ) 
  } 
  );
  ';
  drupal_add_js($radar_dimension_config,'inline','header');
  
  
  $noaa_cur_station = variable_get('noaaweather_current_station', NOAAWEATHER_CURRENT_STATION_DEFAULT);
  $noaa_for_lat = variable_get('noaaweather_forecast_lat', NOAAWEATHER_FORECAST_LAT_DEFAULT);
  $noaa_for_lon = variable_get('noaaweather_forecast_lon', NOAAWEATHER_FORECAST_LON_DEFAULT);
  $noaa_for_days = variable_get('noaaweather_forecast_days', NOAAWEATHER_FORECAST_DAYS_DEFAULT);
  
  $noaa_rad_station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
  $noaa_rad_picture_width = variable_get('noaaweather_radar_picture_width', NOAAWEATHER_RADAR_PICTURE_WIDTH);
  $noaa_rad_picture_height = variable_get('noaaweather_radar_picture_height', NOAAWEATHER_RADAR_PICTURE_HEIGHT);
  
  
  $form = array();
  $form['noaa_settings']['current_conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('NOAA Weather Main Settings'),
    '#description' => t('yet to come'),
    );
    
   $form['noaa_settings']['current_conditions']['updatelink'] = array(
  		'#type' => 'markup',
  		'#value' => '<a href="">Update All Weather</a><br />'
  		 
  	);
  	
  	   $form['noaa_settings']['current_conditions']['updatelink'] = array(
  		'#type' => 'markup',
  		'#value' => '<a href="">Update All Weather</a><br />'
  		 
  	);
    
  	   $form['noaa_settings']['current_conditions']['updatelink'] = array(
  		'#type' => 'markup',
  		'#value' => '<a href="">Update All Weather</a><br />'
  		 
  	);
    
    
 

  return system_settings_form( $form );
}

function noaaweather_settings_form_submit($form_id, $form_values){
  $update_message = 'Your NOAA settings have been saved';
  drupal_set_message(t($update_message));
}



/**
 * Admin menu callback function
 */
function noaaweather_current_settings(){
  return drupal_get_form( 'noaaweather_current_settings_form' );
}


function noaaweather_current_settings_form(){
  require_once(drupal_get_path('module', 'noaaweather') .'/noaaweather_stations.inc');

  $noaa_cur_station = variable_get('noaaweather_current_station', NOAAWEATHER_CURRENT_STATION_DEFAULT);
  $noaa_for_lat = variable_get('noaaweather_forecast_lat', NOAAWEATHER_FORECAST_LAT_DEFAULT);
  $noaa_for_lon = variable_get('noaaweather_forecast_lon', NOAAWEATHER_FORECAST_LON_DEFAULT);
  $noaa_for_days = variable_get('noaaweather_forecast_days', NOAAWEATHER_FORECAST_DAYS_DEFAULT);
  
  $noaa_rad_station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
  $noaa_rad_picture_width = variable_get('noaaweather_radar_picture_width', NOAAWEATHER_RADAR_PICTURE_WIDTH);
  $noaa_rad_picture_height = variable_get('noaaweather_radar_picture_height', NOAAWEATHER_RADAR_PICTURE_HEIGHT);
  
  
  $form = array();
  $form['noaa_settings']['current_conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Current Conditions'),
    '#description' => t('Configure current conditions and forecast requests to NOAA'),
    '#weight' => 1,
    );
    
 
  $form['noaa_settings']['current_conditions']['noaaweather_current_station'] = array(
    '#type' => 'select',
    '#title' => t('NOAA Current Conditions Weather Stations'),
    '#multiple' => FALSE,
    '#options' => $noaaweather_stations_list,
    '#description' => t('Select a Station'),
    '#weight' => 1,
    '#default_value' => $noaa_cur_station,
    );

  return system_settings_form( $form );
}

//Submit Current Settings Form
function noaaweather_current_settings_form_submit($form_id, $form_values){
  //set noaa vars to form values
  variable_set('noaaweather_current_station', $form_values['noaaweather_current_station']);
  $update_message = 'Your NOAA Current settings have been saved';
  drupal_set_message(t($update_message));
}
//End Current Settings

/**
 * Admin menu callback function for Forecast
 */
function noaaweather_forecast_settings(){
  return drupal_get_form( 'noaaweather_forecast_settings_form' );
}

//Forecast Admin Form
function noaaweather_forecast_settings_form(){
  require_once(drupal_get_path('module', 'noaaweather') .'/noaaradar_stations.inc');
  $noaa_for_lat = variable_get('noaaweather_forecast_lat', NOAAWEATHER_FORECAST_LAT_DEFAULT);
  $noaa_for_lon = variable_get('noaaweather_forecast_lon', NOAAWEATHER_FORECAST_LON_DEFAULT);
  $noaa_for_days = variable_get('noaaweather_forecast_days', NOAAWEATHER_FORECAST_DAYS_DEFAULT);
	$noaa_dayspan = variable_get('noaaweather_forecast_dayspan', NOAAWEATHER_FORECAST_DAYSPAN_DEFAULT);
  $noaa_tempunit = variable_get('noaaweather_forecast_tempunit', NOAAWEATHER_FORECAST_TEMP_UNIT_DEFAULT);
	
  $form = array();
	$form['noaa_settings']['point_forecast'] = array(
		'#type' => 'fieldset',
		'#title' => t('Point Forecast'),
		'#description' => t('Configure forecast requests to NOAA'),
		'#weight' => 1
  );
      
   $form['noaa_settings']['point_forecast'][ 'noaaweather_forecast_lat' ] = array(
      '#type' => 'textfield',
      '#title' => t('NOAA Forecast Latitude'),
      '#default_value' => $noaa_for_lat,
      '#size' => 6,
      '#weight' => 1
    );
    
    
    $form['noaa_settings']['point_forecast'][ 'noaaweather_forecast_lon' ] = array(
      '#type' => 'textfield',
      '#title' => t('NOAA Forecast Longitude'),
      '#default_value' => $noaa_for_lon,
      '#size' => 6,
      '#weight' => 2
      );
      
    $form['noaa_settings']['point_forecast'][ 'noaaweather_forecast_days' ] = array(
      '#type' => 'select',
      '#title' => t('Number of Day to Forecast'),
      '#default_value' => $noaa_for_days,
      '#options' => array(
      '1' => t('1'),
      '2' => t('2'),
      '3' => t('3'),
      '4' => t('4'),
      '5' => t('5'),
      '6' => t('6'), 
      '7' => t('7'),
      '8' => t('8'),
      '9' => t('9')
      ),
      '#weight' => 3
    );
    
    $form['noaa_settings']['point_forecast_options'] = array(
			'#type' => 'fieldset',
			'#title' => t('Additional Settings'),
			'#description' => t('Configure forecast display'),
			'#weight' => 2
  	);
  	
  	$form['noaa_settings']['point_forecast_options'][ 'noaaweather_forecast_dayspan' ] = array(
      '#type' => 'select',
      '#title' => t('Forecast Span'),
      '#description' => t('Display 12 or 24 hour forecast.'),
      '#default_value' => $noaa_dayspan,
      '#options' => array(
      '12' => t('12 Hour'),
      '24' => t('24 Hour')
      ),
      '#weight' => 1
     );
     
    $form['noaa_settings']['point_forecast_options'][ 'noaaweather_forecast_tempunit' ] = array(
      '#type' => 'select',
      '#title' => t('Tempature Unit'),
      '#description' => t('Select temperature units to display.'),
      '#default_value' => $noaa_tempunit,
      '#options' => array(
      'f' => t('Farenheit'),
      'c' => t('Centigrade'),
      'b' => t('Both')
      ),
      '#weight' => 2
    );
    
  return system_settings_form( $form );
}

//Validate forecast
function noaaweather_forecast_settings_form_validate($form_id, $form_values) {
  
  if (!is_numeric($form_values['noaaweather_forecast_lat']) || $form_values['noaaweather_forecast_lat'] > 90 || $form_values['noaaweather_forecast_lat'] < -90) {
    form_set_error('lat', t('Latitude value must be numeric and between 90 and -90.'));
  }
  if (!is_numeric($form_values['noaaweather_forecast_lon']) || $form_values['noaaweather_forecast_lon'] > 180 || $form_values['noaaweather_forecast_lon'] < -180){
    form_set_error('lon', t('Longitude value must be numeric and between 180 and -180.'));
  }  

  $return_value = TRUE;
  return $return_value;
}

//Submit Forecast
function noaaweather_forecast_settings_form_submit($form_id, $form_values){

  //set noaa vars to form values
  variable_set('noaaweather_forecast_lat', $form_values['noaaweather_forecast_lat']);
  variable_set('noaaweather_forecast_lon', $form_values['noaaweather_forecast_lon']);
  variable_set('noaaweather_forecast_days', $form_values['noaaweather_forecast_days']);
  variable_set('noaaweather_forecast_dayspan', $form_values['noaaweather_forecast_dayspan']);
  variable_set('noaaweather_forecast_tempunit', $form_values['noaaweather_forecast_tempunit']);

  $update_message = 'NOAA Forecast settings have been saved';
  
  drupal_set_message(t($update_message));
}
//End Forecast Settings

/**
 * Admin menu callback function for Radar Settings
 */
function noaaweather_radar_settings(){
  return drupal_get_form( 'noaaweather_radar_settings_form' );
}

function noaaweather_radar_settings_form(){
	
	require_once(drupal_get_path('module', 'noaaweather') .'/noaaradar_stations.inc');
	$noaa_rad_station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
	$noaa_rad_picture_width = variable_get('noaaweather_radar_picture_width', NOAAWEATHER_RADAR_PICTURE_WIDTH);
	$noaa_rad_picture_height = variable_get('noaaweather_radar_picture_height', NOAAWEATHER_RADAR_PICTURE_HEIGHT);
	
	$radar_dimension_config ='
  jQuery("#edit-noaaweather-radar-width").ready( function()
  { 
    jQuery("#edit-noaaweather-radar-width").change( function()
    {
          var widthvalue = $(this).val();
            var heightvalue = Math.ceil(widthvalue * .916666);
            
            alert(heightvalue);
            jQuery("#edit-noaaweather-radar-height").val(heightvalue);
            jQuery("div#radar_height").text(heightvalue);
    } 
    ) 
  } 
  );
  ';
  drupal_add_js($radar_dimension_config,'inline','header');
	
	$form['radar'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('Radar'),
	  '#description' => t('Configure radar station'),
	);
	  
	$form['radar'][ 'noaaweather_radar_station' ] = array(
		'#type' => 'select',
		'#title' => t('NOAA Ridge Radar Station'),
		'#multiple' => FALSE,
		'#options' => $noaaradar_stations_list,
		'#description' => t(''),
		'#weight' => 1,
		'#default_value' => $noaa_rad_station
	);
	
	$form['radar'][ 'noaaweather_radar_width' ] = array(
		'#type' => 'textfield',
		'#title' => t('Ridge Radar Picture Width (in pixels)'),
		'#description' => t(''),
		'#size' => 10,
		'#weight' => 2,
		'#default_value' => $noaa_rad_picture_width
	);
	/*
	  $form['radar'][ 'noaaweather_radar_background_color' ] = array(
    '#type' => 'textfield',
      '#title' => t('Ridge Radar Picture Width (in pixels)'),
      '#description' => t(''),
      '#size' => 10,
      '#weight' => 2,
      '#default_value' => $noaa_rad_picture_width
      );
	*/
	$form['radar'][ 'noaaweather_radar_height' ] = array(
		'#type' => 'hidden',
		'#weight' => 3,
		'#default_value' => $noaa_rad_picture_height
	);
	
	$form['radar'][ 'noaaweather_radar_height_display' ] = array(
		'#type' => 'markup',
		'#weight' => 4,
		'#value' => t('Ridge Radar Picture Height (in pixels)').'<div id="radar_height">'.$noaa_rad_picture_height."</div>"
	);
	
  $form['radar']['rtfm'] = array(
	  '#type' => 'fieldset',
	  '#title' => t('About Sizing the Radar Picture'),
	  '#tree' => TRUE, 
	  '#collapsible' => TRUE,
	  '#collapsed' => TRUE, 
	  '#weight' => 5,
  );
	    
  $form['radar']['rtfm']['rtfm_table_start'] = array(
    '#type' => 'markup',
    '#value' => '<table>'
  );
	  
  $form['radar']['rtfm']['how'] = array(
  	'#type' => 'markup',
    '#value' => 'The actual pixel dimensions of radar images and overlays, as downloaded from NOAA are 600px X 550px. One can adjust the width dimension to allow the radar picture to fit in a specific layout. Simply change the width above to the desired target in pixels. The height will adjust automatically at a ratio of approximately .9166 to 1 on saving. Note! - We are not changing the actual width and height of the downloaded images from NOAA. Rather we are specifying the height and width attributes of the images and the associated css. Hence, adjusting to a smaller widths may result in the text in overlays such as the cities, radar warnings , and legend being illegible. The clarity thresh-hold is approximately 400px in width. ',
 
		'#prefix' => theme('noaaweather_form_wrapper', 'row_first_prefix', array('cell' => array('style' => 'padding-bottom:5px;line-height:13px;font-size:11px'))),
    '#suffix' => theme('noaaweather_form_wrapper', 'row_last_suffix'), 
  );
	      
  $form['radar']['rtfm']['rtfm_table_end'] = array(
    '#type' => 'markup',
    '#value' => '</table>'
  );
	  

	
	return system_settings_form( $form );
}

function noaaweather_radar_settings_form_submit($form_id, $form_values){

  //flag the current radar station or set to default
  $current_radar_station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
  
  //set noaa vars to form values
  variable_set('noaaweather_radar_station', $form_values['noaaweather_radar_station']);
  variable_set('noaaweather_radar_picture_width', $form_values['noaaweather_radar_width']);
  variable_set('noaaweather_radar_picture_height', $form_values['noaaweather_radar_height']);

  $update_message = 'NOAA Radar settings have been saved';
  
  //flag the new radar station or set to default
  $noaa_rad_station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
  
  //only bother to grab radar overlays if configuring a new radar station
  if($current_radar_station != $noaa_rad_station){
    //get new radar overlays returns 
    $got_radar_overlays = noaaweather_get_radar_overlays(variable_get('noaaweather_radar_station', NULL));
  
    if($got_radar_overlays){
      $update_message .= t('<br>Radar Images for Station "!rad" updated', array('!rad'=>$noaa_rad_station));
    }
  }
  drupal_set_message(t($update_message));
}

function noaaweather_get_radar_overlays($radar_station){
  
  $radar_overlays_array = array(
  'Topo_Short.jpg'=>'http://radar.weather.gov/ridge/Overlays/Topo/Short/radarstation_Topo_Short.jpg',
  'County_Short.gif'=>'http://radar.weather.gov/ridge/Overlays/County/Short/radarstation_County_Short.gif',
  'Rivers_Short.gif'=>'http://radar.weather.gov/ridge/Overlays/Rivers/Short/radarstation_Rivers_Short.gif',
  'Highways_Short.gif'=>'http://radar.weather.gov/ridge/Overlays/Highways/Short/radarstation_Highways_Short.gif',
  'City_Short.gif'=>'http://radar.weather.gov/ridge/Overlays/Cities/Short/radarstation_City_Short.gif',
  'Warnings_0.gif'=>'http://radar.weather.gov/ridge/Warnings/Short/radarstation_Warnings_0.gif',
  'N0R_Legend_0.gif'=>'http://radar.weather.gov/ridge/Legend/N0R/radarstation_N0R_Legend_0.gif',
  );
  
  $noaa_rad_station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
  $destination_path = file_directory_path().'/noaaweather/radar/'.$noaa_rad_station;
  
  if(!is_dir($destination_path)){
    mkdir($destination_path, 0777);
  }
  $upload_error = false;
  foreach($radar_overlays_array as $key => $value){
    $imgval = str_replace('radarstation', $noaa_rad_station , $value);
    $destination = $destination_path.'/'.$noaa_rad_station.'_'.$key;
    if(!copy($imgval,$destination)){
      watchdog('noaaweather', t('NOAAWEATHER - Current Radar Image Upload Failed!'), WATCHDOG_ERROR, NULL);
      $upload_error = true;
    }else{
      watchdog('noaaweather', t('NOAAWEATHER - Current Radar Overlays Upload Successful'), WATCHDOG_NOTICE, NULL);
    }
  }

  if($upload_error === false)
  {
      $radar_updated = _noaaweather_get_radar();
      if($radar_updated){
        watchdog('noaaweather', t('NOAAWEATHER - Current Radar Update Successful'), WATCHDOG_NOTICE, NULL);
      }else{
        watchdog('noaaweather', t('NOAAWEATHER - Current Radar Update Failed!'), WATCHDOG_ERROR, NULL);
      }
  
    return true;
  }else{
    return false;
  }     
}
// End Radar Settings

/**
 * Admin menu callback function for Icon Settings
 */
function noaaweather_icon_settings(){
  return drupal_get_form( 'noaaweather_icon_settings_form' );
}

function noaaweather_icon_settings_form(){
	require_once(drupal_get_path('module', 'noaaweather') .'/noaa_fcicons.inc');
 $form['radar'] = array(
      '#type' => 'fieldset',
      '#title' => t('Weather Icon Configuration'),
      '#description' => t('Configure radar station'),
    );

}

function noaaweather_icon_settings_form_submit($form_id, $form_values){

  //set noaa vars to form values
  variable_set('noaaweather_icon_usedefault', $form_values['noaaweather_icon_usedefault']);

  $update_message = 'NOAA Icon settings have been saved';
  

  drupal_set_message(t($update_message));
}

//end Icon Settings

//end admin functions

//begin theming

/**
 * Generate HTML for the customweather block
 *
 * @param $op the operation from the URL
 * @param $delta offset
 * @return block HTML
 */
function noaaweather_block ($op='list', $delta=0){  
  $currentstring = variable_get('noaa_current', null);
  /*
  if($currentstring){
  	$currentarray = unserialize($currentstring);
  }
  else
  {
  	$currentarray = '';
  }
  */
  $forecaststring = variable_get('noaa_forecast', null);
 /* if($forecaststring){
  	$forecastarray = unserialize($forecastarray);
  }
  else
  {
  	$forecastarray = '';
  }
 */

  $radarstation = variable_get('noaaweather_radar_station', null);
  /*
 if($radarstation){
  	$forecastarray = unserialize($forecastarray);
  }
  else
  {
  	$forecastarray = '';
  }
  */
  //$radararray = unserialize('$radarstring');
  

  // listing of blocks, such as on the admin/block page
  if ($op == "list"){
    $block[ 0 ][ 'info' ] = t('Current Conditions');
    $block[ 1 ][ 'info' ] = t('Weather Forecast');
    $block[ 2 ][ 'info' ] = t('Radar Picture');
    return $block;
  }elseif ($op == 'view'){
    switch ( $delta ){
      case 0:
        $block = theme('noaa_current_conditions_block', $currentarray);
        break;
      case 1:
        $block = theme('noaa_forecast_block', $forecastarray);
        break;
      case 2:
        $block = theme('noaa_radar_block', $radarstation);
        break;
    } 
    return $block;
  }
}

function theme_noaa_current_conditions_block( $current ){
if($current){
	
	 echo"<pre>";
	 print_r($current);
	 echo"</pre>";exit;
	 
  $block_content = "<div id=\"noaa-current\">";
  $block_content .= '<div class="noaa-current-daystr">'.$current['observation_time_rfc822'].'</div>';
  $block_content .= '<span class="noaa-current-updatedon">'.$current['observation_time'].'</span><br clear="all"/>';
  
  $pathtomodule = drupal_get_path('module', 'noaaweather');
  //$current_icon_src = $pathtomodule.'/iconsets/noaadefault/'.$current['icon_url_name'];
  
  $current_icon_src = $pathtomodule.'/images/bkn.jpg';
  
  
  $block_content .= "<div class=\"noaa-current-image\"><img src=\"$current_icon_src\"></div>";
  $block_content .= "<div class=\"noaa-current-data1\">";
  $block_content .= "Weather: ".$current['weather'];
  $block_content .= "<br />Currently: ".$current['temperature_string'];
  $block_content .= "<br />Humidity: ".$current['relative_humidity'];
  $block_content .= "</div>";
  $block_content .= "<div class=\"noaa-current-data2\">";
  $block_content .= "Wind:".$current['wind_string'];
  $block_content .= "<br />Barometer: ".$current['pressure_in'];
  $block_content .= "<br />Visibility: ".$current['visibility_mi'].' miles';
  $block_content .= "</div>";
  $block_content .= "</div><br clear=\"all\">";
}else{
	
	$block_content = "<div id=\"noaa-current\">";
	$block_content .= "No Current Conditions Station Defined";
	$block_content .= "</div>";
	
}
  $block[ 'subject' ] = "Current Conditions for ".$current['location'].' ('.$current['station_id'].')';
  $block[ 'content' ] = $block_content;
  return $block;
}

function theme_noaa_forecast_block( $forecast ){
	
	if($forecast){

	$noaa_forecast_dayspan = variable_get('noaaweather_forecast_dayspan', NOAAWEATHER_FORECAST_DAYSPAN_DEFAULT);
	$noaa_forecast_tempunit = variable_get('noaaweather_forecast_tempunit', NOAAWEATHER_FORECAST_TEMPUNIT_DEFAULT);
	/*
	echo"<pre>";
	print_r($forecast);
	echo"</pre>";
	echo $noaa_forecast_tempunit.'<br>';
	echo $noaa_forecast_dayspan;exit;
	*/
	
	
	$block_content = "<div id=\"noaa-forecast\">";
  
	foreach ($forecast as $forecastday){ 
  	$img1 = $forecastday['conditions_icon1'];
  	$img2 = $forecastday['conditions_icon2'];
   	$img1_local = $forecastday['local_conditions_icon1'];
  	$img2_local = $forecastday['local_conditions_icon2'];
  	
  	switch ($noaa_forecast_tempunit){
  		case 'f':
  			$hitempstr = 'HI: '.$forecastday['temperature_max'].'&#176;F';
  			$lotempstr = 'LO: '.$forecastday['temperature_min'].'&#176;F';
  			break;
  		case 'c':
  			$tfh = (int)$forecastday['temperature_max'];
  			$tfl = (int)$forecastday['temperature_min'];
  			$tch = (5/9)*($tfh-32);
  			$tcl = (5/9)*($tfl-32);
  			$hitempstr = 'HI: '.$tch.'&#176;C';
  			$lotempstr = 'LO: '.$tcl.'&#176;C';
  			break;
  		case 'b':
  			$tfh = (int)$forecastday['temperature_max'];
  			$tfl = (int)$forecastday['temperature_min'];
  			$tch = (5/9)*($tfh-32);
  			$tcl = (5/9)*($tfl-32);
  			$hitempstr = 'HI: '.$forecastday['temperature_max'].'&#176;F ('.(int)$tch.'&#176;C)';
  			$lotempstr = 'LO: '.$forecastday['temperature_min'].'&#176;F ('.(int)$tcl.'&#176;C)';
  			break;
  			
  		break;
  		
  	}

  	
	  $block_content .= "<div class=\"noaa-forecast-day noaa-forecast-day-$noaa_forecast_dayspan-$noaa_forecast_tempunit\">";
	  $block_content .= "<div class=\"noaa-forecast-dayformated\">".$forecastday['daystrformated1']."</div>";
	  
	 
	  
	  if($noaa_forecast_dayspan == '24')
	  {
	  	$block_content .= '<div style="width:60px;">'.$forecastday['period_name2'].'<br /><img src="'.$img1.'"><br />'.$forecastday['weather_summary2'].'</div>';
	  }
	  else
	  {
	  	$block_content .= '<div>';
			$block_content .= '<div style="float:left;width:60px;"><img src="'.$img1.'"></div>';
			$block_content .= $hitempstr.'<br />';
			$block_content .= $lotempstr;
			$block_content .= "</div>";
			
			$block_content .= '<br clear="all"/><div style="padding:3px;">'.$forecastday['weather_summary1'].'. Chance of precipitation is '.$forecastday['probability_of_precipitation1'].'%.</div>';
	  }
	  
	  $block_content .= "</div>";
  }
  $block_content .= "<br clear=\"all\"></div>";
	}else{
		
	$block_content = "<div id=\"noaa-forecast\">";
	$block_content .= "No Point Forecast Defined";
	$block_content .= "</div>";
		
	}
 	$block[ 'subject' ] = "5 Day Forecast";
  $block[ 'content' ] = $block_content;
  return $block;
}

function theme_noaa_radar_block( $radar ){ 
	
$pathtomodule = drupal_get_path('module', 'noaaweather');
drupal_add_css($pathtomodule.'/css/noaaweather.css','module','all', FALSE);
drupal_add_js($pathtomodule.'/js/noaaweather.js','module','header', FALSE, TRUE);

$noaa_rad_picture_width = variable_get('noaaweather_radar_picture_width', NOAAWEATHER_RADAR_PICTURE_WIDTH);
$noaa_rad_picture_height = variable_get('noaaweather_radar_picture_height', NOAAWEATHER_RADAR_PICTURE_HEIGHT);
$noaa_rad_background_width = $noaa_rad_picture_width + 18;
$noaa_rad_background_height = $noaa_rad_picture_height + 38; 
$noaa_rad_background_color ='#4D768D';
$noaa_rad_toggle_top = $noaa_rad_background_height - 20;

$block_content .= '<div id="bkgrnd"  style="width:'.$noaa_rad_background_width.'px;height:'.$noaa_rad_background_height.'px;background-color:'.$noaa_rad_background_color.';">
<div id="basemap"><img src="'.$pathtomodule.'/images/black.gif" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" alt=""></div>
<div id="image0"><img style="z-index:0" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/'.$radar.'_Topo_Short.jpg" alt=""></div>
<div id="image1"><img style="z-index:1" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/current_radar.gif" name="conditionalimage" alt=""></div>
<div id="image2"><img style="z-index:2" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/'.$radar.'_County_Short.gif" alt=""></div>
<div id="image3"><img style="z-index:3" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/'.$radar.'_Rivers_Short.gif" alt=""></div>
<div id="image4"><img style="z-index:4" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/'.$radar.'_Highways_Short.gif" alt=""></div>
<div id="image5"><img style="z-index:5" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/'.$radar.'_City_Short.gif" alt=""></div>
<div id="image7"><img style="z-index:7" width = "'.$noaa_rad_picture_width.'" height="'.$noaa_rad_picture_height.'" src="files/noaaweather/radar/'.$radar.'/current_legend.gif" alt=""></div>

<div id="toggles" style="top:'.$noaa_rad_toggle_top.'px;">
<form action="#" name="checkform1">
<input type="checkbox" onClick="changeVisibility(this,0)" id="checkbox0" name="checkbox0" checked alt="Turn the topography overlay on and off"><label for="checkbox0">Topo</label>&nbsp; 
<input type="checkbox" onClick="changeVisibility(this,1)" id="checkbox1" name="checkbox1" checked alt="Turn the radar image overlay on and off"><label for="checkbox1">Radar</label>&nbsp;
<input type="checkbox" onClick="changeVisibility(this,4)" id="checkbox4" name="checkbox4" checked alt="Turn the highways overlay on and off"><label for="checkbox4">Highways</label>&nbsp;
<input type="checkbox" onClick="changeVisibility(this,5)" id="checkbox5" name="checkbox5" checked alt="Turn the city name overlay on and off"><label for="checkbox5">Cities</label>&nbsp;
</div>';
  $block[ 'subject' ] = "Ridge Radar for ".$radar;
  $block[ 'content' ] = $block_content;
  
  return $block;
}


function noaaweather_cron(){
  $current = _noaaweather_get_current_conditions();
  
  if($current && is_array($current)){
    $current_string = serialize($current);
    variable_set('noaa_current',$current_string);
  }
  
  $forecast = _noaaweather_get_forecast();
  if($forecast && is_array($forecast)){
    $forecast_string = serialize($forecast);
    variable_set('noaa_forecast',$forecast_string);
  }
    
  $radar = _noaaweather_get_radar();
  if($radar){
    variable_set('noaaweather_current_radar_ts', time());
  }
}

function _noaaweather_update_weather(){
  
	$current = _noaaweather_get_current_conditions();
  if($current && is_array($current)){
    $current_string = serialize($current);
    variable_set('noaa_current',$current_string);
  }
  
  $forecast = _noaaweather_get_forecast();
  if($forecast && is_array($forecast)){
    $forecast_string = serialize($forecast);
    variable_set('noaa_forecast',$forecast_string);
  }
    
  $radar = _noaaweather_get_radar();
  if($radar){
    variable_set('noaaweather_current_radar_ts', time());
  }
  
  echo"<pre>";
  print_r($current);
  echo"</pre>";
  echo"<pre>";
  print_r($forecast);
  echo"</pre>"; 
  echo"<pre>";
  print_r($radar);
  echo"</pre>";exit;
  
}

/**
 * Request NOAA Current Conditions Feed, Parse, Return array containing specific weather data
 *
 * This function takes the value of noaaweather_current_station var and loads the NOAA Current Conditions
 * for that station into a SimpleXML object.
 * 
 * @return array containing current conditions data as specified by $current_conditions_namespaces
 */

function _noaaweather_get_current_conditions()
{
  //$settings = array();
  $current_condtions = array();
  $noaa_cur_station = variable_get('noaaweather_current_station', NOAAWEATHER_CURRENT_STATION_DEFAULT);
  // get current conditions
  $current_conditions_xml = "http://www.weather.gov/xml/current_obs/$noaa_cur_station.xml";
  
  $noaa_xml_obj = simplexml_load_file ( $current_conditions_xml );

  if (!is_object($noaa_xml_obj)){
    watchdog('noaaweather', t('Custom Weather Current Weather could not load!'), WATCHDOG_ERROR, NULL);
    return $settings;
  }else{
   
    $current_conditions_namespaces = array(
      'location',
      'station_id',
      'latitude',
      'longitude',
      'observation_time',
      'observation_time_rfc822',
      'weather',
      'temperature_string',
      'temp_f',
      'temp_c',
      'relative_humidity',
      'wind_string',
      'wind_dir',
      'wind_degrees',
      'wind_mph',
      'wind_kt',
      'pressure_string',
      'pressure_mb',
      'pressure_in',
      'dewpoint_string',
      'dewpoint_f',
      'dewpoint_c',
      'windchill_string',
      'windchill_f',
      'windchill_c',
      'visibility_mi',
      'icon_url_base',
      'icon_url_name'
    );
    
    //loop all children of object root node
    foreach ($noaa_xml_obj->children() as $child){
      //extract namespace of child node
      $namespace = $child->getName();
      
      //look for match in $current_conditions_namespaces array. if found then add to $current_conditions array
      if(in_array($namespace,$current_conditions_namespaces)){
        $current_condtions[$namespace] = trim($child[0]);
      }
    }
    watchdog('noaaweather', t('Custom Weather Current Weather loaded successfully!'), WATCHDOG_NOTICE, NULL);
  }
  return $current_condtions;
}

function _noaaweather_get_forecast(){  
  // grab variables to pass to noaa request
  $noaa_for_lat = variable_get('noaaweather_forecast_lat', NOAAWEATHER_FORECAST_LAT_DEFAULT);
  $noaa_for_lon = variable_get('noaaweather_forecast_lon', NOAAWEATHER_FORECAST_LON_DEFAULT);
  $noaa_for_days = variable_get('noaaweather_forecast_days', NOAAWEATHER_FORECAST_DAYS_DEFAULT);
  
  // set AND send request to NOAA
  $forecast = "http://www.weather.gov/forecasts/xml/SOAP_server/ndfdSOAPclientByDay.php?lat=$noaa_for_lat&lon=$noaa_for_lon&format=12+hourly&startDate=&numDays=$noaa_for_days&Submit=Submit";


  $xml = simplexml_load_file ($forecast);
  

  $extended = array();
  if (!is_object($xml)){
    watchdog('noaaweather', t('NOAA Weather Extended Forecast failed to load!'), WATCHDOG_ERROR, NULL); 
  }else{
    
  	// set parameter and timelayout parameters from simpleXML generated from raw NOAA data
  	$data = $xml->data;
  	$parameters = $xml->data->parameters;
   	$timelayout0 = $xml->data->{'time-layout'}[0];
   	$timelayout1 = $xml->data->{'time-layout'}[1];
   	$timelayout2 = $xml->data->{'time-layout'}[2];

		$dayi=0;
    foreach ($timelayout2->{'start-valid-time'} as $daytime){
    	$attribs = $daytime->attributes();
    	$period_name = $attribs['period-name'];
    	
    	$daytime_array = explode('T', $daytime);
    	$day_array = explode('-', $daytime_array[0]);
    	$time_array = explode('-', $daytime_array[1]);

    	$day_ts = mktime(0, 0, 0, (int)$day_array[1], (int)$day_array[2], (int)$day_array[0]);
    	
    	if($dayi % 2){
	    	$curdayi = $dayi-1;
	    	$extended[$curdayi/2][ 'period_name2' ] = trim($period_name);
	    	$extended[$curdayi/2][ 'dayts2' ] = trim($day_ts); 
	      $extended[$curdayi/2][ 'daystr2' ] = trim($daytime);
	      $extended[$curdayi/2][ 'daystrformated2' ] = date('l',$day_ts);
	      
    	}
    	else 
    	{
	    	$extended[$dayi/2][ 'period_name1' ] = trim($period_name);
	    	$extended[$dayi/2][ 'dayts1' ] = trim($day_ts); 
	      $extended[$dayi/2][ 'daystr1' ] = trim($daytime);
	      $extended[$dayi/2][ 'daystrformated1' ] = date('l',$day_ts); 
    	}
      $dayi++;
    }
    
    //max daily temp
    $max_temp_array = $parameters->temperature[0]->value;
    $maxi=0;
    foreach ($max_temp_array as $max_temp){  
      $extended[$maxi][ 'temperature_max' ] = trim($max_temp);  
      $maxi++;
    }
    
    //min daily temp
    $min_temp_array = $parameters->temperature[1]->value;
    $mini=0;
    foreach ($min_temp_array as $min_temp){  
      $extended[$mini][ 'temperature_min' ] = trim($min_temp);  
      $mini++;
    }
    

    
    
    //probability of percipitation
    $popi=0;
    foreach ($parameters->{'probability-of-precipitation'}->value as $pop){  
      $popvalser = _noaaweather_serializemmp($pop);
      $popvalunser = unserialize($popvalser );
      $popval =  $popvalunser->data;
      
      if($popi%2){  
        $popi2 = ($popi-1)/2; // set index for correct day
        $extended[ $popi2 ][ 'probability_of_precipitation2' ] = $popval;
      }else{
        $popi1 = $popi/2; // set index for correct day
        $extended[ $popi1][ 'probability_of_precipitation1' ] = $popval;
      }
      
      $popi++;
    }
    
    //loop weather-condition obj assigning 0 and 12 hour values for each day index
    $wsi = 0;//set weather summary index 
    foreach ($parameters->weather->{'weather-conditions'} as $weathersummary){
      $wsvalser = _noaaweather_serializemmp($weathersummary['weather-summary']);
      $wsvalunser = unserialize($wsvalser );
      $wsvalarray = explode("=",$wsvalunser->data);
      $wsval=  str_replace('"','',$wsvalarray[1]);
      if($wsi%2){  
        $wsi2 = ($wsi-1)/2; // set index for correct day
        $extended[ $wsi2 ][ 'weather_summary2' ] = $wsval;
      }else{
        $wsi1 = $wsi/2; // set index for correct day
        $extended[ $wsi1][ 'weather_summary1' ] = $wsval;
      }
      $wsi++;
    }
    
    //loop conditions-icon obj assigning 0 and 12 hour values for each day index
    $ci = 0;//set conditions icon index 
    foreach ($parameters->{'conditions-icon'}->{'icon-link'} as $conditionsicon){
    	
      $civalser = _noaaweather_serializemmp($conditionsicon);
      $cipvalunser = unserialize($civalser );
      $stripout = array("<icon-link>", "</icon-link>");
      $cipval =  str_replace($stripout,'',$cipvalunser->data);
      $cipval_local_array = array_reverse(explode('/',$cipval));
      $cipval_local = $cipval_local_array[0];

      if($ci%2){  
        $ci2 = ($ci-1)/2;
        $extended[ $ci2 ][ 'conditions_icon2' ] = $cipval;
        $extended[ $ci2 ][ 'local_conditions_icon2' ] = $cipval_local;
      }else{
        $ci1 = $ci/2;
        $extended[$ci1][ 'conditions_icon1' ] = $cipval;
        $extended[ $ci1 ][ 'local_conditions_icon1' ] = $cipval_local;
      }
      $ci++;
    }

  }
  
  return $extended;
}


function _noaaweather_get_radar(){
	
  $station = variable_get('noaaweather_radar_station', NOAAWEATHER_RADAR_STATION_DEFAULT);
  
  $destination_path = file_directory_path().'/noaaweather/radar/'.$station;
  $destination_radar = $destination_path.'/current_radar.gif';
  $destination_legend = $destination_path.'/current_legend.gif'; //files/noaaweather/radar/gjx/gjx_N0R_legend_0.gif
  $basename = file_check_path($destination_path);

  if($basename === FALSE){
    watchdog('noaaweather', t('NOAAWEATHER Radar Directory not Valid!'), WATCHDOG_ERROR, NULL);
    return false;
  }else{
    $radar_url ="http://radar.weather.gov/ridge/RadarImg/N0R/".$station."_N0R_0.gif";
    $legend_url ="http://radar.weather.gov/ridge/Legend/N0R/".$station."_N0R_Legend_0.gif";

    if(!copy($radar_url,$destination_radar)){
      watchdog('noaaweather', t('NOAAWEATHER - Current Radar Image Upload Failed!'), WATCHDOG_ERROR, NULL);
      //return false;
    }else{
      watchdog('noaaweather', t('NOAAWEATHER - Current Radar Image Upload Successful'), WATCHDOG_NOTICE, NULL);
     // return true;
    } 
    
    if(!copy($legend_url,$destination_legend)){
      watchdog('noaaweather', t('NOAAWEATHER - Current Radar Legend Image Upload Failed!'), WATCHDOG_ERROR, NULL);
      //return false;
    }else{
      watchdog('noaaweather', t('NOAAWEATHER - Current Radar Legend Image Upload Successful'), WATCHDOG_NOTICE, NULL);
      //return true;
    } 
    
    
    
    return true;
    
  }
}


/**
 * Serialize simpleXML Object created from XML pulled directly from noaaweather
 * toserialize = simpleXML object
 * 
 * @return string
 */

function _noaaweather_enable_icons(){
	
	
	$pathtomodule = drupal_get_path('module', 'noaaweather');
	
	$source = $pathtomodule.'/icons/noaadefault';
	
	$dest = file_directory_path().'/noaaweather/icons/noaadefault';
  
  if(!is_dir($dest)){
    mkdir($dest, 0777);
  }
  

	echo $dest.'<br>';
	
	
	$dir = dir($source);
	
	
$d = dir($source);

while (false !== ($entry = $d->read())) {
	if ($entry == "." || $entry == "..") {
		continue;
	}
	//chmod($source.'/'.$entry, 775);
		
	if(copy($source.'/'.$entry, $dest.'/'.$entry))
	{
	
   echo $entry." - copied<br>";
	}
	else
	{
		echo $entry." - failed<br>";
	}
}
$d->close();
	
	exit;
	$pathtomodule = drupal_get_path('module', 'noaaweather');
	$source = $pathtomodule.'/icons/noaadefault';
	$dest = 'files/noaaweather/';
	
	$copied = noaaweather_copyr($source, $dest);
	
	if($copied)
	{
		echo 'copied';
	}else
	{
		echo 'failed';
	}
	
	
}

/**
 * Serialize simpleXML Object created from XML pulled directly from noaaweather
 * toserialize = simpleXML object
 * 
 * @return string
 */
function _noaaweather_serializemmp($toserialize){
  
  //return serialize($toserialize);

  if(is_a($toserialize, "SimpleXMLElement")){
    $stdClass = new stdClass();
    $stdClass->type = get_class($toserialize);
    $stdClass->data = $toserialize->asXml();
    return serialize($stdClass);
  }else{
  	return serialize($toserialize);
  }
}

/**
 * unserialize noaaweather string 
 * 
 * @return object
 */
function _noaaweather_unserializemmp($tounserialize){
  
$tounserialize = unserialize($tounserialize);
  if(is_a($tounserialize, "stdClass")){
    if($tounserialize->type == "SimpleXMLElement"){
      $tounserialize = simplexml_load_string($tounserialize->data);
    }
  }
  return $tounserialize;
}


function noaaweather_weather_station_options(){
  require_once(drupal_get_path('module', 'noaaweather') .'/noaaweather_stations.inc');
  $options = $noaaweather_stations_list;
  return $options;
}

function noaaweather_radar_station_options(){
  require_once(drupal_get_path('module', 'noaaweather') .'/noaaradar_stations.inc');
  $options = $noaaradar_stations_list;
  return $options;
}

/**
 * Theme function for form element wrappers
 */
function theme_noaaweather_form_wrapper($arg, $params = array()){

  $table_attribs = '';
  if (isset($params['table']) && is_array($params['table'])) {
    foreach ($params['table'] as $key => $attrib){
      $table_attribs .= $key . '="' . $attrib . '" '; 
    }
  }

  $row_attribs = '';
  if (isset($params['row']) && is_array($params['row'])){
    foreach ($params['row'] as $key => $attrib){
      $row_attribs .= $key . '="' . $attrib . '" '; 
    }
  }

  $cell_attribs = '';
  if (isset($params['cell']) && is_array($params['cell'])){
    foreach ($params['cell'] as $key => $attrib){
      $cell_attribs .= $key . '="' . $attrib . '" '; 
    }
  }
  
  switch ($arg){
    
    case 'table_first_prefix':
      return "<table $table_attribs >";
      
    case 'table_last_suffix':
      return "</table>";
    
    case 'row_first_prefix':
      return "<tr><td $cell_attribs>";
      
    case 'row_last_suffix':
      return "</td></tr>";
    
    case 'cell_first_prefix':
      return "<table $table_attribs ><tr $row_attribs ><td $cell_attribs >";
    
    case 'cell_first_suffix':
      return "</td>";        
    
    case 'cell_middle_prefix':
      return "<td $cell_attribs>&nbsp;</td><td $cell_attribs >";
    
    case 'cell_middle_suffix':
      return "</td>";
      
        case 'cell_middle_suffix_prefix':
      return "</td><td $cell_attribs>";   
         
  case 'cell_last_prefix':
      return "<td $cell_attribs >&nbsp;</td><td $cell_attribs >";
    
    case 'cell_last_suffix':
      return "</td></tr></table>";      
    
    case 'new_line':
      return "<br $class />";
    
    case 'new_para':
      return "<p $class />";
  }
}